library(DESeq2)

altflw1<-read.table(file="altflw1.stats", row.names = 1,sep = "\t")
altflw2<-read.table(file="altflw2.stats", row.names = 1,sep = "\t")
altflw3<-read.table(file="altflw3.stats", row.names = 1,sep = "\t")
altveg1<-read.table(file="altveg1.stats", row.names = 1,sep = "\t")
altveg2<-read.table(file="altveg2.stats", row.names = 1,sep = "\t")
altveg3<-read.table(file="altveg3.stats", row.names = 1,sep = "\t")

names(altflw1)<-c("len","altflw1", "un")
names(altflw2)<-c("len","altflw2", "un")
names(altflw3)<-c("len","altflw3", "un")
names(altveg1)<-c("len","altveg1", "un")
names(altveg2)<-c("len","altveg2", "un")
names(altveg3)<-c("len","altveg3", "un")
head(altveg3)

altflw1<- altflw1[,c(1,2)]
altflw2<- altflw2[,c(1,2)]
altflw3<- altflw3[,c(1,2)]
altveg1<- altveg1[,c(1,2)]
altveg2<- altveg2[,c(1,2)]
altveg3<- altveg3[,c(1,2)]


P<-merge(altflw1, altflw2, by="row.names")
P<- P[-1,]
head(P)
row.names(P)<-P[,1]
P<-P[,-1]
head(P)

Q<-merge(P, altflw3, by="row.names")
row.names(Q)<-Q[,1]
Q<-Q[,-1]
head(Q)

R<-merge(Q, altveg1, by="row.names")
row.names(R)<-R[,1]
R<-R[,-1]
head(R)

S<-merge(R, altveg2, by="row.names")
row.names(S)<-S[,1]
S<-S[,-1]
head(S)

T<-merge(S, altveg3, by="row.names")
row.names(T)<-T[,1]
T<-T[,-1]
head(T)

alt_table1<-T[,c(2,4,6,8,10,12)]
head(alt_table1)

(condition <- factor(c(rep("altflw", 3), rep("altveg", 3))))

library(DESeq2)
library("vctrs")

(coldata <- data.frame(row.names=colnames(alt_table1), condition))
dds <- DESeqDataSetFromMatrix(countData=alt_table1, colData=coldata, design=~condition)

dds

dds <- DESeq(dds)

# Plot dispersions

png("qc-dispersions.png", 1000, 1000, pointsize=20)

plotDispEsts(dds, main="Dispersion plot")

dev.off()



## Regularized log transformation for clustering/heatmaps, etc

rld <- rlogTransformation(dds)

head(assay(rld))

hist(assay(rld))



# Colors for plots below


## (mycols <- 1:length(unique(condition)))

## Use RColorBrewer, better

library(RColorBrewer)

(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])



# Sample distance heatmap

sampleDists <- as.matrix(dist(t(assay(rld))))

library(gplots)

png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)

heatmap.2(as.matrix(sampleDists), key=F, trace="none",
          
          col=colorpanel(100, "black", "white"),
          
          ColSideColors=mycols[condition], RowSideColors=mycols[condition],
          
          margin=c(10, 10), main="Sample Distance Matrix")

dev.off()



# Principal components analysis

## Could do with built-in DESeq2 function:

## DESeq2::plotPCA(rld, intgroup="condition")

##or else:

rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
  
  require(genefilter)
  
  require(calibrate)
  
  require(RColorBrewer)
  
  rv = rowVars(assay(rld))
  
  select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
  
  pca = prcomp(t(assay(rld)[select, ]))
  
  fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
  
  if (is.null(colors)) {
    
    if (nlevels(fac) >= 3) {
      
      colors = brewer.pal(nlevels(fac), "Paired")
      
    }   else {
      
      colors = c("black", "red")
      
    }
    
  }
  
  pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
  
  pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
  
  pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
  
  pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
  
  plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
  
  with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
  
  legend(legendpos, legend=levels(fac), col=colors, pch=20)
  
  #     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
  
  #            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
  
  #                                                                                         terldt = list(levels(fac)), rep = FALSE)))
  
}

png("qc-pca.png", 1000, 1000, pointsize=20)

rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-75, 35))

dev.off()

# Get differential expression results

res2 <- results(dds, contrast=c("condition","altflw","altveg"))
head(res2)

mcols(res2, use.names=TRUE)

summary(res2)

padj.cutoff <- 0.05
lfc.cutoff <- 1

A<-subset(res2, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
head(A)
summary(subset(res2, padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff))

##volcanoplot
DT <-as.data.frame(res2)
plot(DT$log2FoldChange, -log10(DT$pval),
     xlim=c(-10, 10), ylim=c(0, 15),
     xlab="log2 fold change", ylab="-log10 p-value",
     type="n")  
x <- which(DT$log2FoldChange >= 1 & DT$pval<0.05) 
points(DT[x,"log2FoldChange"], -log10(DT[x,"pval"]),col="red",pch = 20) 
y <- which(DT$log2FoldChange <= -1 & DT$pval<0.05) 
points(DT[y,"log2FoldChange"], -log10(DT[y,"pval"]),col="green", pch = 20)
z <- which(DT$log2FoldChange >= 1 & DT$pval>0.05) 
points(DT[z,"log2FoldChange"], -log10(DT[z,"pval"]),col="black", pch = 20)
a <- which(DT$log2FoldChange <= -1 & DT$pval>0.05) 
points(DT[a,"log2FoldChange"], -log10(DT[a,"pval"]),col="black", pch = 20)  
b <- which(DT$log2FoldChange > -1 & DT$pval>0.05) 
points(DT[b,"log2FoldChange"], -log10(DT[b,"pval"]),col="black", pch = 20)
c <- which(DT$log2FoldChange < 1 & DT$pval>0.05) 
points(DT[c,"log2FoldChange"], -log10(DT[c,"pval"]),col="black", pch = 20)


## Merge with normalized count data

data1 <- merge(as.data.frame(A), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)

names(data1)[1] <- "Gene"

head(data1)


## Write results

write.csv(data1, file="signf_expddata.csv")

#to get sequence from the trinity.fasta
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
DEgenes<-read.csv("signf_expddata.csv", stringsAsFactors = FALSE)
head(DEgenes)

# read in the fasta file
fasta <- readDNAStringSet("Trinity.fasta")
head(fasta)
fasta_names<-names(fasta)
head(fasta_names)
seq_names1<-names(fasta)
seq_names1<-unlist(lapply(seq_names1,function (x) strsplit(x, " ")[[1]][1]))
names(fasta)<-seq_names1
head(names(fasta))

DEgenesseq<-fasta[unlist(DEgenes$Gene)]

matching_gene <- fasta[unlist(DEgenes$Gene)]
length(matching_gene)
dim(DEgenesseq)

write.csv(as.data.frame(matching_gene), "DEgenes_Seq.csv",
          row.names = TRUE, quote = F)






